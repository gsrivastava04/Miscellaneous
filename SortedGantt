import React, { useState, useMemo } from 'react';

// Simple icon components (no external dependencies)
const ChevronDown = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
  </svg>
);

const ChevronRight = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
  </svg>
);

const Folder = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
  </svg>
);

const FolderOpen = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z" />
  </svg>
);

const FileText = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
);

const Play = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M13 16h3a2 2 0 002-2V9a2 2 0 00-2-2h-3" />
  </svg>
);

const CheckCircle = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const XCircle = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const Pause = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const X = ({ className, ...props }) => (
  <svg className={className} {...props} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
  </svg>
);

const JobGanttChart = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [collapsedTasks, setCollapsedTasks] = useState(new Set());
  const [hoveredJob, setHoveredJob] = useState(null);
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });
  
  // Enhanced date parsing with timezone handling
  const parseDate = (dateString) => {
    if (!dateString) return null;
    
    if (typeof dateString === 'string') {
      if (dateString.includes('+') || dateString.includes('-')) {
        let cleanDate = dateString.replace(/(\d{4})\/(\d{2})\/(\d{2})/, '$1-$2-$3');
        return new Date(cleanDate);
      }
      
      let cleanDate = dateString.replace(/\.\d{3}/, '');
      cleanDate = cleanDate.replace(/(\d{4})\/(\d{2})\/(\d{2})/, '$1-$2-$3');
      return new Date(cleanDate);
    }
    
    return new Date(dateString);
  };

  // Use the exact job data provided - no modifications
  const jobData = {
    "jobs": [
      {"id": "JOB_001", "name": "Daily_Data_Extract", "startdate": "2025/05/28 06:00:00.000 +0000", "enddate": "2025/05/28 16:15:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": [], "parent": null},
      
      {"id": "NEWJ_001", "name": "Data_Processing_Pipeline", "startdate": null, "enddate": null, "status": "RUNNING", "progress": 0, "dependency": [], "parent": null},
      
      {"id": "NEWJ_001_VALIDATION", "name": "Data_Validation_Phase", "startdate": "2025/05/28 09:00:00.000 +0000", "enddate": "2025/05/28 12:00:00.000 +0000", "status": "SUCCESS", "progress": 0, "dependency": [], "parent": "JOB_001"},
      {"id": "NEWJ_001_TRANSFORM", "name": "Data_Transformation_Phase", "startdate": "2025/05/28 08:00:00.000 +0000", "enddate": "2025/05/28 10:30:00.000 +0000", "status": "RUNNING", "progress": 0, "dependency": [], "parent": "JOB_001"},
      {"id": "NEWJ_001_OUTPUT", "name": "Output_Generation_Phase", "startdate": "2025/05/28 09:10:00.000 +0000", "enddate": "2025/05/28 09:50:00.000 +0000", "status": "WAITING", "progress": 0, "dependency": [], "parent": "JOB_001"},
      
      {"id": "JOB_002", "name": "Customer_Data_Validation", "startdate": "2025/05/28 09:10:00.000 +0000", "enddate": "2025/05/28 09:25:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": ["JOB_001"], "parent": "NEWJ_001_VALIDATION"},
      {"id": "JOB_003", "name": "Financial_Data_Validation", "startdate": "2025/05/28 10:15:00.000 +0000", "enddate": "2025/05/28 11:30:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": ["JOB_001"], "parent": "NEWJ_001_VALIDATION"},
      
      {"id": "NEWJ_CUSTOMER_SUBTASKS", "name": "Customer_Validation_Subtasks", "startdate": null, "enddate": null, "status": "SUCCESS", "progress": 0, "dependency": [], "parent": "JOB_002"},
      {"id": "JOB_002_A", "name": "Email_Format_Check", "startdate": "2025/05/28 06:15:00.000 +0000", "enddate": "2025/05/28 06:18:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": [], "parent": "NEWJ_CUSTOMER_SUBTASKS"},
      {"id": "JOB_002_B", "name": "Phone_Number_Validation", "startdate": "2025/05/28 06:18:00.000 +0000", "enddate": "2025/05/28 06:22:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": ["JOB_002_A"], "parent": "NEWJ_CUSTOMER_SUBTASKS"},
      {"id": "JOB_002_C", "name": "Address_Standardization", "startdate": "2025/05/28 06:22:00.000 +0000", "enddate": "2025/05/28 06:25:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": ["JOB_002_B"], "parent": "NEWJ_CUSTOMER_SUBTASKS"},
      
      {"id": "JOB_004", "name": "Data_Transformation", "startdate": "2025/05/28 06:30:00.000 +0000", "enddate": "2025/05/28 07:00:00.000 +0000", "status": "RUNNING", "progress": 65, "dependency": ["JOB_002", "JOB_003"], "parent": "NEWJ_001_TRANSFORM"},
      {"id": "JOB_004_CLEAN", "name": "Data_Cleaning", "startdate": "2025/05/28 06:30:00.000 +0000", "enddate": "2025/05/28 06:45:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": ["JOB_002", "JOB_003"], "parent": "NEWJ_001_TRANSFORM"},
      
      {"id": "JOB_005", "name": "Report_Generation", "startdate": null, "enddate": null, "status": "WAITING", "progress": 0, "dependency": ["JOB_004"], "parent": "NEWJ_001_OUTPUT"},
      {"id": "JOB_006", "name": "Email_Notification", "startdate": null, "enddate": null, "status": "WAITING", "progress": 0, "dependency": ["JOB_005"], "parent": "NEWJ_001_OUTPUT"},
      
      {"id": "JOB_007", "name": "Database_Backup", "startdate": "2025/05/28 02:00:00.000 +0000", "enddate": "2025/05/28 12:00:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": [], "parent": null},
      {"id": "JOB_008", "name": "Log_Cleanup", "startdate": "2025/05/28 03:00:00.000 +0000", "enddate": "2025/05/28 03:05:00.000 +0000", "status": "SUCCESS", "progress": 100, "dependency": ["JOB_007"], "parent": null},
      
      {"id": "NEWJ_002", "name": "System_Monitoring_Suite", "startdate": null, "enddate": null, "status": "FAILED", "progress": 0, "dependency": [], "parent": null},
      {"id": "JOB_009", "name": "System_Health_Check", "startdate": "2025/05/28 04:00:00.000 +0000", "enddate": null, "status": "FAILED", "progress": 80, "dependency": [], "parent": "NEWJ_002"},
      {"id": "JOB_010", "name": "Alert_Generation", "startdate": null, "enddate": null, "status": "WAITING", "progress": 0, "dependency": ["JOB_009"], "parent": "NEWJ_002"},
      
      {"id": "JOB_016", "name": "Very_Long_Job_Name_That_Demonstrates_Layout", "startdate": "2025/05/28 08:00:00.000 +0000", "enddate": "2025/05/28 08:30:00.000 +0000", "status": "RUNNING", "progress": 45, "dependency": ["JOB_004"], "parent": null}
    ]
  };

  // Build hierarchy using only parent relationships with child sorting by start date
  const buildHierarchy = (jobs) => {
    const jobMap = new Map();
    const rootJobs = [];
    
    // First pass: Create all job objects
    jobs.forEach(job => {
      const processedJob = {
        ...job,
        name: job.name.replace(/_/g, ' '),
        startdate: parseDate(job.startdate),
        enddate: parseDate(job.enddate),
        children: [],
        level: 0
      };
      
      jobMap.set(job.id, processedJob);
    });
    
    // Second pass: Build parent-child relationships and calculate levels
    jobMap.forEach(job => {
      if (job.parent) {
        const parent = jobMap.get(job.parent);
        if (parent) {
          parent.children.push(job);
          job.level = parent.level + 1;
        }
      } else {
        rootJobs.push(job);
      }
    });
    
    // Sort children by start date for each parent (earliest first)
    const sortChildrenByStartDate = (jobList) => {
      jobList.forEach(job => {
        if (job.children.length > 0) {
          // Sort children by start date (earliest first, null dates last)
          job.children.sort((a, b) => {
            // Handle null start dates - put them at the end
            if (!a.startdate && !b.startdate) return 0;
            if (!a.startdate) return 1;
            if (!b.startdate) return -1;
            
            // Both have start dates, sort by earliest first
            return a.startdate.getTime() - b.startdate.getTime();
          });
          
          // Recursively sort children of children
          sortChildrenByStartDate(job.children);
        }
      });
    };
    
    // Third pass: Calculate container properties for items with children
    const calculateContainerProperties = (job) => {
      if (job.children.length === 0) return;
      
      job.children.forEach(child => {
        if (child.children.length > 0) {
          calculateContainerProperties(child);
        }
      });
      
      const childDates = job.children
        .filter(child => child.startdate)
        .map(child => ({ start: child.startdate, end: child.enddate }));
      
      if (childDates.length > 0) {
        job.startdate = new Date(Math.min(...childDates.map(d => d.start.getTime())));
        const endDates = childDates.filter(d => d.end).map(d => d.end.getTime());
        if (endDates.length > 0) {
          job.enddate = new Date(Math.max(...endDates));
        }
      }
      
      if (job.children.length > 0) {
        const totalProgress = job.children.reduce((sum, child) => sum + child.progress, 0);
        job.progress = Math.round(totalProgress / job.children.length);
      }
      
      if (job.children.length > 0) {
        if (job.children.every(child => child.status === 'SUCCESS')) {
          job.status = 'SUCCESS';
        } else if (job.children.some(child => child.status === 'FAILED')) {
          job.status = 'FAILED';
        } else if (job.children.some(child => child.status === 'RUNNING')) {
          job.status = 'RUNNING';
        } else if (job.children.some(child => child.status === 'WAITING')) {
          job.status = 'WAITING';
        }
      }
    };
    
    const calculateAllContainerProperties = (jobList) => {
      jobList.forEach(job => {
        calculateContainerProperties(job);
        if (job.children.length > 0) {
          calculateAllContainerProperties(job.children);
        }
      });
    };
    
    calculateAllContainerProperties(rootJobs);
    
    // Sort children by start date after calculating container properties
    sortChildrenByStartDate(rootJobs);
    
    // Sort root jobs by start date as well (earliest first, null dates last)
    return rootJobs.sort((a, b) => {
      if (!a.startdate && !b.startdate) return 0;
      if (!a.startdate) return 1;
      if (!b.startdate) return -1;
      return a.startdate.getTime() - b.startdate.getTime();
    });
  };

  const [jobs] = useState(buildHierarchy(jobData.jobs));

  // Generate dynamic 30-hour timeline
  const timelineRange = useMemo(() => {
    const dates = [];
    let earliestDate = null;
    
    const findEarliestDate = (jobList) => {
      jobList.forEach(job => {
        if (job.startdate) {
          const startDate = parseDate(job.startdate);
          if (startDate && (!earliestDate || startDate < earliestDate)) {
            earliestDate = startDate;
          }
        }
        if (job.children && job.children.length > 0) {
          findEarliestDate(job.children);
        }
      });
    };
    
    findEarliestDate(jobData.jobs.map(job => ({
      ...job,
      startdate: job.startdate
    })));
    
    if (!earliestDate) {
      earliestDate = parseDate("2025/05/28 02:00:00.000 +0000");
    }
    
    const timelineStart = new Date(earliestDate.getTime() - (60 * 60 * 1000));
    
    for (let hour = 0; hour < 30; hour++) {
      const time = new Date(timelineStart.getTime() + (hour * 60 * 60 * 1000));
      dates.push(time);
    }
    
    return dates;
  }, []);

  // Get status color
  const getStatusColor = (status) => {
    switch (status) {
      case 'SUCCESS': return '#10B981';
      case 'RUNNING': return '#F59E0B';
      case 'FAILED': return '#EF4444';
      case 'WAITING': return '#6B7280';
      default: return '#6B7280';
    }
  };

  // Get status icon
  const getStatusIcon = (status) => {
    switch (status) {
      case 'SUCCESS': return CheckCircle;
      case 'RUNNING': return Play;
      case 'FAILED': return XCircle;
      case 'WAITING': return Pause;
      default: return FileText;
    }
  };

  // Flatten jobs for rendering
  const flattenJobs = (jobs, level = 0) => {
    let result = [];
    
    for (const job of jobs) {
      result.push({ ...job, level });
      
      if (job.children && job.children.length > 0 && !collapsedTasks.has(job.id)) {
        result = result.concat(flattenJobs(job.children, level + 1));
      }
    }
    
    return result;
  };

  const flatJobs = useMemo(() => flattenJobs(jobs), [jobs, collapsedTasks]);

  // Toggle job collapse/expand
  const toggleJobCollapse = (jobId) => {
    const newCollapsed = new Set(collapsedTasks);
    if (newCollapsed.has(jobId)) {
      newCollapsed.delete(jobId);
    } else {
      newCollapsed.add(jobId);
    }
    setCollapsedTasks(newCollapsed);
  };

  // Calculate position and width for job bars
  const getJobBarStyle = (job) => {
    if (!job.startdate || timelineRange.length === 0) {
      return { left: '1%', width: '2%' };
    }
    
    const timelineStart = timelineRange[0];
    const timelineEnd = timelineRange[timelineRange.length - 1];
    const timelineDurationMs = timelineEnd.getTime() - timelineStart.getTime();
    
    const jobStartTime = new Date(job.startdate);
    const jobEndTime = job.enddate ? new Date(job.enddate) : new Date(jobStartTime.getTime() + 15 * 60 * 1000);
    
    const jobStartOffset = jobStartTime.getTime() - timelineStart.getTime();
    const jobDuration = jobEndTime.getTime() - jobStartTime.getTime();
    
    const left = Math.max(0, (jobStartOffset / timelineDurationMs) * 100);
    const width = Math.max(0.5, (jobDuration / timelineDurationMs) * 100);
    
    return { 
      left: `${left}%`, 
      width: `${width}%` 
    };
  };

  const formatTime = (date) => {
    if (!date) return 'Not scheduled';
    
    const dateObj = date instanceof Date ? date : parseDate(date);
    if (!dateObj || isNaN(dateObj.getTime())) return 'Invalid date';
    
    return dateObj.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: false,
      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
    });
  };

  const formatDateTime = (date) => {
    if (!date) return 'Not scheduled';
    
    const dateObj = date instanceof Date ? date : parseDate(date);
    if (!dateObj || isNaN(dateObj.getTime())) return 'Invalid date';
    
    return dateObj.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
    }) + ' ' + formatTime(dateObj);
  };

  const formatDuration = (startDate, endDate) => {
    if (!startDate || !endDate) return 'Unknown';
    
    const startObj = startDate instanceof Date ? startDate : parseDate(startDate);
    const endObj = endDate instanceof Date ? endDate : parseDate(endDate);
    
    if (!startObj || !endObj || isNaN(startObj.getTime()) || isNaN(endObj.getTime())) {
      return 'Unknown';
    }
    
    const diffMs = endObj.getTime() - startObj.getTime();
    const diffMinutes = Math.round(diffMs / (1000 * 60));
    
    if (diffMinutes < 60) {
      return `${diffMinutes} min`;
    } else {
      const hours = Math.floor(diffMinutes / 60);
      const minutes = diffMinutes % 60;
      return `${hours}h ${minutes}m`;
    }
  };

  const hasChildren = (job) => job.children && job.children.length > 0;

  const getJobIcon = (job) => {
    if (hasChildren(job)) {
      return collapsedTasks.has(job.id) ? Folder : FolderOpen;
    }
    return getStatusIcon(job.status);
  };

  const handleJobBarHover = (job, event) => {
    setHoveredJob(job);
    setTooltipPosition({
      x: event.clientX,
      y: event.clientY
    });
  };

  const handleJobBarLeave = () => {
    setHoveredJob(null);
  };

  if (!isOpen) {
    return (
      <div style={{ padding: '16px' }}>
        <button
          onClick={() => setIsOpen(true)}
          style={{
            padding: '12px 24px',
            backgroundColor: '#2563eb',
            color: 'white',
            borderRadius: '8px',
            border: 'none',
            fontWeight: '500',
            cursor: 'pointer'
          }}
          onMouseOver={(e) => e.target.style.backgroundColor = '#1d4ed8'}
          onMouseOut={(e) => e.target.style.backgroundColor = '#2563eb'}
        >
          Open Enhanced Job Timeline
        </button>
      </div>
    );
  }

  return (
    <>
      <div 
        style={{
          position: 'fixed',
          inset: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          zIndex: 40
        }}
        onClick={() => setIsOpen(false)} 
      />
      
      <div 
        style={{
          position: 'fixed',
          top: '16px',
          left: '16px',
          right: '16px',
          bottom: '16px',
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
          zIndex: 50,
          display: 'flex',
          flexDirection: 'column'
        }}
      >
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          padding: '12px 16px',
          borderBottom: '1px solid #e5e7eb',
          flexShrink: 0
        }}>
          <h1 style={{
            fontSize: '18px',
            fontWeight: 'bold',
            color: '#1f2937',
            margin: 0
          }}>
            Enhanced Job Timeline (30 Hours)
          </h1>
          <button
            onClick={() => setIsOpen(false)}
            style={{
              padding: '4px',
              borderRadius: '4px',
              border: 'none',
              backgroundColor: 'transparent',
              cursor: 'pointer'
            }}
            onMouseOver={(e) => e.target.style.backgroundColor = '#f3f4f6'}
            onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}
          >
            <X style={{ width: '20px', height: '20px', color: '#6b7280' }} />
          </button>
        </div>

        <div style={{
          flex: 1,
          overflow: 'hidden',
          display: 'flex',
          flexDirection: 'column'
        }}>
          <div style={{
            flex: 1,
            border: '1px solid #e5e7eb',
            margin: '24px 24px 0 24px',
            borderRadius: '8px',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <div style={{
              backgroundColor: '#f9fafb',
              borderBottom: '1px solid #e5e7eb',
              flexShrink: 0,
              overflowX: 'hidden'
            }}>
              <div style={{ 
                display: 'flex',
                minWidth: `${400 + 30 * 60}px`
              }}>
                <div style={{
                  width: '400px',
                  padding: '12px',
                  fontWeight: '600',
                  color: '#374151',
                  borderRight: '1px solid #e5e7eb',
                  overflow: 'hidden',
                  display: 'flex',
                  alignItems: 'center',
                  flexShrink: 0
                }}>
                  <span style={{
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    width: '100%'
                  }}>
                    Job / Batch Hierarchy (Local Time)
                  </span>
                </div>
                
                <div style={{ 
                  width: `${30 * 60}px`,
                  position: 'relative',
                  overflow: 'hidden',
                  flexShrink: 0
                }}>
                  <div style={{ 
                    display: 'flex',
                    width: '100%'
                  }}>
                    {timelineRange.map((time, index) => (
                      <div 
                        key={index}
                        style={{
                          padding: '6px 4px',
                          fontSize: '11px',
                          textAlign: 'center',
                          borderRight: '1px solid #e5e7eb',
                          color: '#6b7280',
                          width: '60px',
                          flexShrink: 0,
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'center'
                        }}
                      >
                        <div style={{ fontWeight: '500' }}>
                          {time.getHours().toString().padStart(2, '0')}:00
                        </div>
                        {index === 0 || time.getHours() === 0 ? (
                          <div style={{ fontSize: '9px', color: '#9ca3af', marginTop: '2px' }}>
                            {time.getDate()}/{time.getMonth() + 1}
                          </div>
                        ) : null}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            <div 
              style={{ 
                flex: 1, 
                overflowX: 'auto',
                overflowY: 'auto'
              }}
              onScroll={(e) => {
                const header = e.target.previousElementSibling;
                if (header) {
                  header.scrollLeft = e.target.scrollLeft;
                }
              }}
            >
              <div style={{
                minWidth: `${400 + 30 * 60}px`,
                height: 'fit-content'
              }}>
                {flatJobs.map((job, index) => {
                  const JobIcon = getJobIcon(job);
                  const statusColor = getStatusColor(job.status);
                  
                  return (
                    <div 
                      key={`${job.id}-${job.level}`}
                      style={{
                        display: 'flex',
                        borderBottom: '1px solid #e5e7eb',
                        minWidth: `${400 + 30 * 60}px`,
                        backgroundColor: 'transparent'
                      }}
                      onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#f9fafb'}
                      onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                    >
                      <div style={{
                        width: '400px', 
                        padding: '12px',
                        borderRight: '1px solid #e5e7eb',
                        flexShrink: 0,
                        overflow: 'hidden'
                      }}>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          paddingLeft: `${job.level * 16}px`,
                          width: '100%'
                        }}>
                          {hasChildren(job) && (
                            <button
                              onClick={() => toggleJobCollapse(job.id)}
                              style={{
                                marginRight: '6px',
                                padding: '2px',
                                borderRadius: '3px',
                                border: 'none',
                                backgroundColor: 'transparent',
                                cursor: 'pointer',
                                flexShrink: 0
                              }}
                              onMouseOver={(e) => e.target.style.backgroundColor = '#e5e7eb'}
                              onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}
                            >
                              {collapsedTasks.has(job.id) ? (
                                <ChevronRight style={{ width: '12px', height: '12px' }} />
                              ) : (
                                <ChevronDown style={{ width: '12px', height: '12px' }} />
                              )}
                            </button>
                          )}
                          
                          <JobIcon 
                            style={{ 
                              width: '14px', 
                              height: '14px', 
                              marginRight: '6px',
                              flexShrink: 0,
                              color: statusColor 
                            }} 
                          />
                          
                          <div 
                            style={{
                              fontWeight: job.level === 0 ? '600' : hasChildren(job) ? '500' : '400',
                              color: hasChildren(job) ? '#1f2937' : '#374151',
                              fontSize: job.level === 0 ? '14px' : '13px',
                              whiteSpace: 'nowrap',
                              cursor: 'pointer',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              flex: 1,
                              minWidth: 0
                            }}
                            title={`${job.name} (Level ${job.level})`}
                            onMouseEnter={(e) => {
                              setHoveredJob({...job, isNameTooltip: true});
                              setTooltipPosition({
                                x: e.clientX,
                                y: e.clientY
                              });
                            }}
                            onMouseLeave={() => {
                              if (hoveredJob?.isNameTooltip) {
                                setHoveredJob(null);
                              }
                            }}
                            onMouseMove={(e) => {
                              if (hoveredJob?.isNameTooltip) {
                                setTooltipPosition({
                                  x: e.clientX,
                                  y: e.clientY
                                });
                              }
                            }}
                          >
                            {job.name}
                          </div>
                        </div>
                      </div>

                      <div style={{
                        width: `${30 * 60}px`,
                        position: 'relative',
                        height: '52px',
                        padding: '8px',
                        flexShrink: 0
                      }}>
                        <div style={{
                          position: 'relative',
                          height: '100%',
                          width: '100%'
                        }}>
                          <div 
                            style={{
                              position: 'absolute',
                              top: '50%',
                              transform: 'translateY(-50%)',
                              borderRadius: '6px',
                              boxShadow: job.level === 0 ? '0 2px 4px 0 rgba(0, 0, 0, 0.1)' : '0 1px 2px 0 rgba(0, 0, 0, 0.1)',
                              display: 'flex',
                              alignItems: 'center',
                              cursor: 'pointer',
                              height: job.level === 0 ? '24px' : hasChildren(job) ? '20px' : '16px',
                              ...getJobBarStyle(job),
                              backgroundColor: statusColor,
                              opacity: job.level === 0 ? 1 : hasChildren(job) ? 0.9 : 0.8,
                              border: job.level > 3 ? '1px solid rgba(255,255,255,0.3)' : 'none'
                            }}
                            onMouseEnter={(e) => {
                              if (!hoveredJob?.isNameTooltip) {
                                handleJobBarHover(job, e);
                              }
                            }}
                            onMouseLeave={() => {
                              if (!hoveredJob?.isNameTooltip) {
                                handleJobBarLeave();
                              }
                            }}
                            onMouseMove={(e) => {
                              if (hoveredJob?.id === job.id && !hoveredJob?.isNameTooltip) {
                                setTooltipPosition({
                                  x: e.clientX,
                                  y: e.clientY
                                });
                              }
                            }}
                          >
                            {job.progress > 0 && job.progress < 100 && (
                              <div 
                                style={{
                                  height: '100%',
                                  borderRadius: '6px',
                                  backgroundColor: 'rgba(255, 255, 255, 0.3)',
                                  width: `${job.progress}%`
                                }}
                              />
                            )}
                            
                            {(job.level === 0 || (hasChildren(job) && job.level <= 1)) && (
                              <div 
                                style={{
                                  fontSize: job.level === 0 ? '12px' : '10px',
                                  fontWeight: '500',
                                  color: 'white',
                                  padding: '0 6px',
                                  pointerEvents: 'none',
                                  overflow: 'hidden',
                                  textOverflow: 'ellipsis',
                                  whiteSpace: 'nowrap',
                                  width: '100%'
                                }}
                              >
                                {job.startdate ? job.name : 'No Schedule'}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
          
          <div style={{
            padding: '24px',
            borderTop: '1px solid #e5e7eb',
            flexShrink: 0
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              gap: '32px',
              marginBottom: '16px',
              fontSize: '14px',
              color: '#6b7280'
            }}>
              <div>
                <strong>{flatJobs.length}</strong> total items
              </div>
              <div>
                <strong>{Math.max(...flatJobs.map(j => j.level)) + 1}</strong> max depth
              </div>
              <div>
                <strong>{flatJobs.filter(j => j.children && j.children.length > 0).length}</strong> containers
              </div>
              <div>
                <strong>{flatJobs.filter(j => !j.children || j.children.length === 0).length}</strong> jobs
              </div>
            </div>
            
            <div style={{
              display: 'flex',
              flexWrap: 'wrap',
              gap: '24px',
              fontSize: '14px',
              justifyContent: 'center'
            }}>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <CheckCircle style={{ width: '16px', height: '16px', marginRight: '8px', color: '#10b981' }} />
                <span style={{ color: '#6b7280' }}>Success</span>
              </div>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <Play style={{ width: '16px', height: '16px', marginRight: '8px', color: '#f59e0b' }} />
                <span style={{ color: '#6b7280' }}>Running</span>
              </div>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <XCircle style={{ width: '16px', height: '16px', marginRight: '8px', color: '#ef4444' }} />
                <span style={{ color: '#6b7280' }}>Failed</span>
              </div>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <Pause style={{ width: '16px', height: '16px', marginRight: '8px', color: '#6b7280' }} />
                <span style={{ color: '#6b7280' }}>Waiting</span>
              </div>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <Folder style={{ width: '16px', height: '16px', marginRight: '8px', color: '#3b82f6' }} />
                <span style={{ color: '#6b7280' }}>Has Children</span>
              </div>
            </div>
          </div>
        </div>

        {hoveredJob && (
          <div 
            style={{
              position: 'fixed',
              zIndex: 60,
              backgroundColor: '#1f2937',
              color: 'white',
              padding: hoveredJob.isNameTooltip ? '8px 12px' : '16px',
              borderRadius: '8px',
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
              maxWidth: hoveredJob.isNameTooltip ? '400px' : '320px',
              pointerEvents: 'none',
              left: `${tooltipPosition.x + 10}px`,
              top: `${tooltipPosition.y - 10}px`,
              transform: 'translateY(-100%)'
            }}
          >
            {hoveredJob.isNameTooltip ? (
              <div style={{
                fontSize: '14px',
                whiteSpace: 'normal',
                wordBreak: 'break-word'
              }}>
                <div style={{ fontWeight: '600', marginBottom: '4px' }}>
                  {hoveredJob.name.replace(/_/g, ' ')}
                </div>
                <div style={{ fontSize: '12px', color: '#d1d5db' }}>
                  Level {hoveredJob.level} • {hasChildren(hoveredJob) ? 'Parent' : 'Job'}
                </div>
              </div>
            ) : (
              <>
                <div style={{
                  fontWeight: '600',
                  fontSize: '16px',
                  marginBottom: '8px'
                }}>
                  {hoveredJob.name}
                </div>
                
                <div style={{ display: 'flex', flexDirection: 'column', gap: '6px', fontSize: '13px' }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>Type:</span>
                    <span style={{ fontWeight: '500' }}>
                      {hasChildren(hoveredJob) ? 'Parent' : 'Job'}
                    </span>
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>Level:</span>
                    <span style={{ fontWeight: '500' }}>{hoveredJob.level}</span>
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>Status:</span>
                    <span style={{ 
                      fontWeight: '600',
                      color: getStatusColor(hoveredJob.status)
                    }}>
                      {hoveredJob.status}
                    </span>
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>Start:</span>
                    <span>{formatDateTime(hoveredJob.startdate)}</span>
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>End:</span>
                    <span>{formatDateTime(hoveredJob.enddate)}</span>
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>Duration:</span>
                    <span>{formatDuration(hoveredJob.startdate, hoveredJob.enddate)}</span>
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                    <span style={{ color: '#d1d5db' }}>Progress:</span>
                    <span style={{ fontWeight: '600' }}>{hoveredJob.progress}%</span>
                  </div>
                  
                  {hoveredJob.children && hoveredJob.children.length > 0 && (
                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                      <span style={{ color: '#d1d5db' }}>Children:</span>
                      <span style={{ fontWeight: '500' }}>{hoveredJob.children.length}</span>
                    </div>
                  )}
                  
                  {hoveredJob.dependency && hoveredJob.dependency.length > 0 && (
                    <div style={{
                      borderTop: '1px solid #4b5563',
                      paddingTop: '8px',
                      marginTop: '8px'
                    }}>
                      <span style={{ color: '#d1d5db' }}>Dependencies:</span>
                      <div style={{ marginTop: '4px' }}>
                        {hoveredJob.dependency.map(dep => (
                          <div 
                            key={dep} 
                            style={{
                              fontSize: '11px',
                              backgroundColor: '#374151',
                              padding: '3px 6px',
                              borderRadius: '3px',
                              display: 'inline-block',
                              marginRight: '4px',
                              marginBottom: '4px'
                            }}
                          >
                            {dep}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </>
            )}
            
            <div style={{
              position: 'absolute',
              top: '100%',
              left: '16px',
              width: 0,
              height: 0,
              borderLeft: '8px solid transparent',
              borderRight: '8px solid transparent',
              borderTop: '8px solid #1f2937'
            }} />
          </div>
        )}
      </div>
    </>
  );
};

export default JobGanttChart;
